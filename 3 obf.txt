do PlayerHandSection:Toggle({Name="Enable Hand Skin",Default=false,Callback=function(value) local success,errorMsg=pcall(function() ArmsVisual.Enabled=value;if ArmsVisual.Enabled then if ArmsVisual.Connection then ArmsVisual.Connection:Disconnect();end ArmsVisual.Connection=game:GetService("RunService").RenderStepped:Connect(function() local success,errorMsg=pcall(function() UpdateArmsVisual(ArmsVisual.Color or Color3.fromRGB(0,255,255) ,ArmsVisual.Transparency or 0.5 );end);if  not success then warn("[ArmsVisual] : "   .. tostring(errorMsg) );pcall(EmergencyDisableArmsVisual);end end);pcall(SetupWeaponChangeListener);pcall(function() UpdateArmsVisual(ArmsVisual.Color or Color3.fromRGB(0,255,255) ,ArmsVisual.Transparency or 0.5 );end);else if ArmsVisual.Connection then ArmsVisual.Connection:Disconnect();ArmsVisual.Connection=nil;end if ArmsVisual.WeaponChangeConnection then ArmsVisual.WeaponChangeConnection:Disconnect();ArmsVisual.WeaponChangeConnection=nil;end if ArmsVisual.WeaponRemoveConnection then ArmsVisual.WeaponRemoveConnection:Disconnect();ArmsVisual.WeaponRemoveConnection=nil;end pcall(function() UpdateArmsVisual(Color3.fromRGB(30,30,30),0);end);end end);if  not success then warn("[ArmsVisual]  : "   .. tostring(errorMsg) );pcall(EmergencyDisableArmsVisual);pcall(function() if (PlayerHandSection and PlayerHandSection.Objects and PlayerHandSection.Objects['EnableHandSkin'] and (type(PlayerHandSection.Objects['EnableHandSkin'].Set)=="function")) then PlayerHandSection.Objects['EnableHandSkin']:Set(false);end end);pcall(function() Window:Notify({Title="Hand Visual",Description=" : "   .. tostring(errorMsg) ,Lifetime=5});end);end end},"EnableHandSkin");PlayerHandSection:Colorpicker({Name="Hand Color",Default=Color3.fromRGB(0,255,255),Callback=function(value) ArmsVisual.Color=value;if ArmsVisual.Enabled then UpdateArmsVisual(ArmsVisual.Color or Color3.fromRGB(0,255,255) ,ArmsVisual.Transparency or 0.5 );end end},"HandColor");PlayerHandSection:Slider({Name="Transparency",Default=50,Minimum=0.01,Maximum=100,Precision=2,Callback=function(value) ArmsVisual.Transparency=value/100 ;if ArmsVisual.Enabled then local safeColor=ArmsVisual.Color or Color3.fromRGB(0,255,255) ;UpdateArmsVisual(safeColor,ArmsVisual.Transparency);end end},"HandTransparency");PlayerHandSection:Dropdown({Name="Material Type",Multi=false,Required=true,Options={"ForceField","Neon","Glass","SmoothPlastic"},Default="ForceField",Callback=function(value) local materialMap={Neon=Enum.Material.Neon,ForceField=Enum.Material.ForceField,Glass=Enum.Material.Glass,SmoothPlastic=Enum.Material.SmoothPlastic};ArmsVisual.Material=materialMap[value] or Enum.Material.Neon ;if ArmsVisual.Enabled then local safeColor=ArmsVisual.Color or Color3.fromRGB(0,255,255) ;local safeTransparency=ArmsVisual.Transparency or 0.5 ;UpdateArmsVisual(safeColor,safeTransparency);end end},"MaterialType");local function updateGazeLine() if ( not ESP.Enabled or  not ESP.Drawing.GazeLine.Enabled) then return;end local players=game:GetService("Players"):GetPlayers();for _,player in pairs(players) do if (player==game:GetService("Players").LocalPlayer) then continue;end if ( not player or  not player.Character) then continue;end local head=player.Character:FindFirstChild("Head");if  not head then continue;end local distance=(game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position-head.Position).Magnitude;if (distance>ESP.MaxDistance) then continue;end if ESP.TeamCheck then local playerTeam=player.Team;local localTeam=game:GetService("Players").LocalPlayer.Team;if (playerTeam and localTeam and (playerteam==localTeam)) then continue;end end local lookVector=head.CFrame.LookVector;if  not ESP.GazeLines then ESP.GazeLines={};end if  not ESP.GazeLines[player] then ESP.GazeLines[player]=Drawing.new("Line");ESP.GazeLines[player].Thickness=ESP.Drawing.GazeLine.Thickness;ESP.GazeLines[player].Color=ESP.Drawing.GazeLine.RGB;ESP.GazeLines[player].Transparency=1;ESP.GazeLines[player].Visible=true;end local headPosition=head.Position;local screenHeadPosition=Workspace.CurrentCamera:WorldToViewportPoint(headPosition);local endPosition=headPosition + (lookVector * ESP.Drawing.GazeLine.Length) ;local screenEndPosition=Workspace.CurrentCamera:WorldToViewportPoint(endPosition);if ((screenHeadPosition.Z>0) and (screenEndPosition.Z>0)) then ESP.GazeLines[player].From=Vector2.new(screenHeadPosition.X,screenHeadPosition.Y);ESP.GazeLines[player].To=Vector2.new(screenEndPosition.X,screenEndPosition.Y);ESP.GazeLines[player].Visible=true;else ESP.GazeLines[player].Visible=false;end end for player,line in pairs(ESP.GazeLines or {} ) do if ( not player or  not player.Character or  not player.Character:FindFirstChild("Head")) then line.Visible=false;ESP.GazeLines[player]=nil;end end end local oldUpdateESP=UpdateESPSettings;function UpdateESPSettings() if oldUpdateESP then oldUpdateESP();end pcall(updateGazeLine);end if  not ESP.Connections.GazeLineUpdate then ESP.Connections.GazeLineUpdate=RunService.RenderStepped:Connect(function() if (ESP.Enabled and ESP.Drawing.GazeLine.Enabled) then local currentTime=tick();if ((currentTime-ESP.Performance.LastGazeLineUpdate)>=ESP.Performance.GazeLineUpdateInterval) then ESP.Performance.LastGazeLineUpdate=currentTime;pcall(updateGazeLine);end elseif ESP.GazeLines then for _,line in pairs(ESP.GazeLines) do line.Visible=false;end end end);end local function UpdateSkeletonLine(line,part1,part2) if ( not line or  not part1 or  not part2) then if line then line.Visible=false;end return;end if ((typeof(part1)=="Instance") and  not part1.Parent) then line.Visible=false;return;end if ((typeof(part2)=="Instance") and  not part2.Parent) then line.Visible=false;return;end local position1,position2;pcall(function() if ((typeof(part1)=="table") and part1.Position) then position1=part1.Position;elseif ((typeof(part1)=="Instance") and part1:IsA("BasePart")) then position1=part1.Position;end end);pcall(function() if ((typeof(part2)=="table") and part2.Position) then position2=part2.Position;elseif ((typeof(part2)=="Instance") and part2:IsA("BasePart")) then position2=part2.Position;end end);if ( not position1 or  not position2) then line.Visible=false;return;end local camera=workspace.CurrentCamera;local pos1,visible1=camera:WorldToViewportPoint(position1);local pos2,visible2=camera:WorldToViewportPoint(position2);if (visible1 and visible2 and (pos1.Z>0) and (pos2.Z>0)) then local baseFOV=70;local fovCompensation=math.tan(math.rad(baseFOV)/2 )/math.tan(math.rad(camera.FieldOfView)/2 ) ;line.From=Vector2.new(pos1.X,pos1.Y);line.To=Vector2.new(pos2.X,pos2.Y);line.Thickness=(ESP.Drawing.Skeleton.Thickness or 1) * fovCompensation ;line.Visible=true;else line.Visible=false;end end local function UpdatePlayerSkeleton(player,skeleton) if ( not player or  not skeleton) then return;end local character=player.Character;if  not character then if workspace:FindFirstChild("Players") then character=workspace.Players:FindFirstChild(player.Name);end end if ( not character or  not ESP.Drawing.Skeleton.Enabled) then for name,line in pairs(skeleton) do if ((type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then pcall(function() if (line and (typeof(line)~="table") and (type(line)~="number")) then line.Visible=false;end end);end end return;end local humanoid=character:FindFirstChild("Humanoid");if (humanoid and (humanoid.Health<=0)) then for name,line in pairs(skeleton) do if ((type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then pcall(function() if (line and (typeof(line)~="table") and (type(line)~="number")) then line.Visible=false;end end);end end return;end local rootPart=character:FindFirstChild("HumanoidRootPart");local localPlayer=game:GetService("Players").LocalPlayer;local localCharacter=localPlayer and localPlayer.Character ;local localRootPart=localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") ;if ( not rootPart or  not localRootPart) then for name,line in pairs(skeleton) do if ((type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then pcall(function() if (line and (typeof(line)~="table") and (type(line)~="number")) then line.Visible=false;end end);end end return;end local camera=workspace.CurrentCamera;local camCFrame=camera.CFrame;local currentCamPos=camCFrame.Position;local currentFoV=camera.FieldOfView;local rootPos=rootPart.Position;local distance=(localRootPart.Position-rootPos).Magnitude;local _,onScreen=camera:WorldToViewportPoint(rootPos);if ( not onScreen or (ESP.MaxDistance and (distance>ESP.MaxDistance))) then for name,line in pairs(skeleton) do if ((type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then pcall(function() if (line and (typeof(line)~="table") and (type(line)~="number")) then line.Visible=false;end end);end end return;end skeleton.lastPlayerPos=rootPos;skeleton.lastUpdate=tick();skeleton.lastFoV=currentFoV;skeleton.lastCamPos=currentCamPos;for name,line in pairs(skeleton) do if ((type(name)=="string") and (name~="HeadCircle") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then pcall(function() if (line and (typeof(line)~="table") and (type(line)~="number") and (type(line.Color)~="nil")) then line.Color=ESP.Drawing.Skeleton.Color;end end);end end pcall(function() if (skeleton.HeadCircle and (type(skeleton.HeadCircle)~="number") and (type(skeleton.HeadCircle.Color)~="nil")) then skeleton.HeadCircle.Color=ESP.Drawing.Skeleton.Color;end end);pcall(function() local isR15=character:FindFirstChild("UpperTorso")~=nil ;if isR15 then local head=character:FindFirstChild("Head");local upperTorso=character:FindFirstChild("UpperTorso");local lowerTorso=character:FindFirstChild("LowerTorso");local leftUpperArm=character:FindFirstChild("LeftUpperArm");local leftLowerArm=character:FindFirstChild("LeftLowerArm");local leftHand=character:FindFirstChild("LeftHand");local rightUpperArm=character:FindFirstChild("RightUpperArm");local rightLowerArm=character:FindFirstChild("RightLowerArm");local rightHand=character:FindFirstChild("RightHand");if (head and skeleton.HeadCircle and (type(skeleton.HeadCircle)~="number")) then local headScreen,headOnScreen=camera:WorldToViewportPoint(head.Position);if (headOnScreen and (headScreen.Z>0)) then pcall(function() local baseFOV=70;local fovCompensation=math.tan(math.rad(baseFOV)/2 )/math.tan(math.rad(camera.FieldOfView)/2 ) ;local baseRadius=3;skeleton.HeadCircle.Position=Vector2.new(headScreen.X,headScreen.Y);skeleton.HeadCircle.Radius=baseRadius * fovCompensation ;skeleton.HeadCircle.Visible=true;end);else pcall(function() skeleton.HeadCircle.Visible=false;end);end end local leftShoulder,rightShoulder;if upperTorso then local leftShoulderAttachment=upperTorso:FindFirstChild("LeftShoulderRigAttachment");if leftShoulderAttachment then leftShoulder={Position=leftShoulderAttachment.WorldPosition,Parent=upperTorso};else leftShoulder={Position=upperTorso.Position + Vector3.new( -upperTorso.Size.X/2 ,upperTorso.Size.Y/2 ,0) ,Parent=upperTorso};end local rightShoulderAttachment=upperTorso:FindFirstChild("RightShoulderRigAttachment");if rightShoulderAttachment then rightShoulder={Position=rightShoulderAttachment.WorldPosition,Parent=upperTorso};else rightShoulder={Position=upperTorso.Position + Vector3.new(upperTorso.Size.X/2 ,upperTorso.Size.Y/2 ,0) ,Parent=upperTorso};end end if (head and upperTorso) then UpdateSkeletonLine(skeleton.NeckLine,head,upperTorso);end if (upperTorso and lowerTorso) then UpdateSkeletonLine(skeleton.UpperSpine,upperTorso,lowerTorso);end if (leftShoulder and leftUpperArm) then UpdateSkeletonLine(skeleton.LeftUpperArm,leftShoulder,leftUpperArm);end if (leftLowerArm and leftHand) then UpdateSkeletonLine(skeleton.LeftLowerArm,leftLowerArm,leftHand);end if (rightShoulder and rightUpperArm) then UpdateSkeletonLine(skeleton.RightUpperArm,rightShoulder,rightUpperArm);end if (rightLowerArm and rightHand) then UpdateSkeletonLine(skeleton.RightLowerArm,rightLowerArm,rightHand);end if (leftUpperArm and leftLowerArm) then UpdateSkeletonLine(skeleton.LeftElbow,leftUpperArm,leftLowerArm);end end end);end local function ClearSkeletons() for player,skeleton in pairs(ESP.Skeletons) do for name,element in pairs(skeleton) do pcall(function() if (element and (typeof(element)~="table")) then element:Remove();end end);end end ESP.Skeletons={};end local originalESPUpdateConnection=ESP.Connections.RunService;if (originalESPUpdateConnection and (typeof(originalESPUpdateConnection)=="RBXScriptConnection")) then originalESPUpdateConnection:Disconnect();end ESP.Connections.RunService=RunService.RenderStepped:Connect(function() if ESP.Enabled then if ESP.Drawing.Skeleton.Enabled then local currentTime=tick();if ((currentTime-ESP.Performance.LastSkeletonUpdate)>=ESP.Performance.SkeletonUpdateInterval) then ESP.Performance.LastSkeletonUpdate=currentTime;local success,errorMsg=pcall(function() for _,player in pairs(Players:GetPlayers()) do if (player~=Players.LocalPlayer) then local character=player.Character;if ( not character and workspace:FindFirstChild("Players")) then character=workspace.Players:FindFirstChild(player.Name);end if (character and character:FindFirstChild("HumanoidRootPart")) then if  not ESP.Skeletons[player] then pcall(InitializePlayerSkeleton,player);end if ESP.Skeletons[player] then pcall(function() UpdatePlayerSkeleton(player,ESP.Skeletons[player]);end);end elseif ESP.Skeletons[player] then for name,element in pairs(ESP.Skeletons[player]) do pcall(function() if (element and (typeof(element)~="table") and (type(element)~="number") and (type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then element.Visible=false;end end);end end end end end);if  not success then warn("Skeleton ESP error: "   .. tostring(errorMsg) );end end else for player,skeleton in pairs(ESP.Skeletons) do for name,element in pairs(skeleton) do pcall(function() if (element and (typeof(element)~="table") and (type(element)~="number") and (type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then element.Visible=false;end end);end end end else for player,skeleton in pairs(ESP.Skeletons) do for name,element in pairs(skeleton) do pcall(function() if (element and (typeof(element)~="table") and (type(element)~="number") and (type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then element.Visible=false;end end);end end end end);Players.PlayerAdded:Connect(function(player) if ESP.Drawing.Skeleton.Enabled then InitializePlayerSkeleton(player);end end);Players.PlayerRemoving:Connect(function(player) if ESP.Skeletons[player] then for name,element in pairs(ESP.Skeletons[player]) do pcall(function() if (element and (typeof(element)~="table")) then element:Remove();end end);end ESP.Skeletons[player]=nil;end end);game:GetService("Players").LocalPlayer.Destroying:Connect(function() ClearSkeletons();end);local function IsDrawingAvailable() local success=pcall(function() local testDrawing=Drawing.new("Line");testDrawing:Remove();end);return success;end sections.ESPMain:Toggle({Name="Skeleton",Default=false,Callback=function(value) ESP.Drawing.Skeleton.Enabled=value;if value then local drawingWorks=pcall(function() local testLine=Drawing.new("Line");testLine:Remove();end);if  not drawingWorks then ESP.Drawing.Skeleton.Enabled=false;Window:Notify({Title="Error",Description="Drawing API not available. Skeleton ESP disabled.",Lifetime=5});sections.ESPMain:get_element("ESPSkeleton"):set_value(false);return;end if  not InitializePlayerSkeleton then function InitializePlayerSkeleton(player) if ESP.Skeletons[player] then for name,line in pairs(ESP.Skeletons[player]) do pcall(function() if (line and (typeof(line)~="table")) then line:Remove();end end);end ESP.Skeletons[player]=nil;end local function CreateSkeletonDrawing(type,properties) local drawing;local success,result=pcall(function() drawing=Drawing.new(type);if properties then for prop,value in pairs(properties) do pcall(function() drawing[prop]=value;end);end end drawing.Visible=false;return drawing;end);if (success and result) then return result;else pcall(function() drawing=Drawing.new(type);drawing.Visible=false;if (type=="Line") then drawing.Thickness=ESP.Drawing.Skeleton.Thickness or 1 ;drawing.Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) ;elseif (type=="Circle") then drawing.Thickness=1;drawing.Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) ;drawing.NumSides=20;drawing.Radius=4;drawing.Filled=true;end end);return drawing;end end ESP.Skeletons[player]={lastPlayerPos=nil,lastUpdate=tick(),lastFoV=nil,lastCamPos=nil,NeckLine=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),UpperSpine=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LowerSpine=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftUpperArm=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftLowerArm=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightUpperArm=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightLowerArm=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftUpperLeg=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftLowerLeg=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightUpperLeg=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightLowerLeg=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftFoot=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightFoot=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftElbow=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightElbow=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),LeftClavicle=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) }),RightClavicle=CreateSkeletonDrawing("Line",{Thickness=ESP.Drawing.Skeleton.Thickness or 1 ,Color=ESP.Drawing.Skeleton.Color or Color3.new(1,1,1) })};return ESP.Skeletons[player];end end pcall(function() local drawingAvailable=true;for _,player in pairs(Players:GetPlayers()) do if (player~=Players.LocalPlayer) then if (ESP.Drawing.Skeleton.Enabled and drawingAvailable and  not ESP.Skeletons[player]) then InitializePlayerSkeleton(player);end if (ESP.Drawing.Skeleton.Enabled and drawingAvailable and ESP.Skeletons[player]) then UpdatePlayerSkeleton(player,ESP.Skeletons[player]);end end end end);else for player,skeleton in pairs(ESP.Skeletons) do for name,line in pairs(skeleton) do pcall(function() if (line and (typeof(line)~="table") and (type(line)~="number")) then line.Visible=false;end end);end end end end},"ESPSkeleton");sections.ESPMain:Colorpicker({Name="Skeleton Color",Default=ESP.Drawing.Skeleton.Color,Alpha=0,Callback=function(color) ESP.Drawing.Skeleton.Color=color;for _,skeleton in pairs(ESP.Skeletons) do for _,line in pairs(skeleton) do if (typeof(line)~="table") then pcall(function() line.Color=color;end);end end end end},"ESPSkeletonColor");sections.ESPMain:Slider({Name="Skeleton Thickness",Default=1,Minimum=1,Maximum=5,Callback=function(value) ESP.Drawing.Skeleton.Thickness=value;for _,skeleton in pairs(ESP.Skeletons) do for _,line in pairs(skeleton) do if (typeof(line)~="table") then pcall(function() line.Thickness=value;end);end end end end},"ESPSkeletonThickness");local function SafeCloudAccess() local terrain=Workspace:FindFirstChildOfClass("Terrain");if  not terrain then return nil;end local cloudExists=false;pcall(function() cloudExists=terrain.Clouds~=nil ;end);if  not cloudExists then return nil;end return {terrain=terrain,getColor=function() local success,result=pcall(function() return terrain.Clouds.Color;end);return (success and result) or Color3.fromRGB(255,255,255) ;end,getCover=function() local success,result=pcall(function() return terrain.Clouds.Cover;end);return (success and result) or 0.5 ;end,getDensity=function() local success,result=pcall(function() return terrain.Clouds.Density;end);return (success and result) or 0.5 ;end,getEnabled=function() local success,result=pcall(function() return terrain.Clouds.Enabled;end);return (success and result) or false ;end,setColor=function(color) pcall(function() terrain.Clouds.Color=color;end);end,setCover=function(cover) pcall(function() terrain.Clouds.Cover=cover;end);end,setDensity=function(density) pcall(function() terrain.Clouds.Density=density;end);end,setEnabled=function(enabled) pcall(function() terrain.Clouds.Enabled=enabled;end);end};end local function SetupWeaponChangeListener() local camera=workspace.Camera;if ArmsVisual.WeaponChangeConnection then ArmsVisual.WeaponChangeConnection:Disconnect();ArmsVisual.WeaponChangeConnection=nil;end if ArmsVisual.WeaponRemoveConnection then ArmsVisual.WeaponRemoveConnection:Disconnect();ArmsVisual.WeaponRemoveConnection=nil;end if ArmsVisual.ViewModelChildrenConnection then ArmsVisual.ViewModelChildrenConnection:Disconnect();ArmsVisual.ViewModelChildrenConnection=nil;end if ArmsVisual.ViewModelChildrenRemovedConnection then ArmsVisual.ViewModelChildrenRemovedConnection:Disconnect();ArmsVisual.ViewModelChildrenRemovedConnection=nil;end local currentSettings={Enabled=ArmsVisual.Enabled,Color=ArmsVisual.Color or Color3.fromRGB(0,255,255) ,Transparency=ArmsVisual.Transparency or 0.5 ,Material=ArmsVisual.Material or Enum.Material.ForceField };local function shouldProcess(obj) if ( not obj or  not obj:IsA("Model")) then return false;end local name=obj.Name:lower();if ((ArmsVisual.IgnoreList and ArmsVisual.IgnoreList[name]) or name:find("camera")) then return false;end local isViewModel=name:find("view") or name:find("arm") or name:find("weapon") or name:find("hand") or name:find("gun") or name:find("item") or name:find("model") ;return isViewModel;end local function updateViewModel(model) if ( not model or  not ArmsVisual.Enabled) then return;end ArmsVisual.LastUsedColor=nil;ArmsVisual.LastUsedTransparency=nil;ArmsVisual.LastUsedMaterial=nil;ArmsVisual.LastViewModelCheck=nil;ArmsVisual.CachedViewModel=model;ArmsVisual.LastViewModelCheck=nil;if ArmsVisual.ViewModelChildrenConnection then ArmsVisual.ViewModelChildrenConnection:Disconnect();ArmsVisual.ViewModelChildrenConnection=nil;end if ArmsVisual.ViewModelChildrenRemovedConnection then ArmsVisual.ViewModelChildrenRemovedConnection:Disconnect();ArmsVisual.ViewModelChildrenRemovedConnection=nil;end ArmsVisual.ViewModelChildrenConnection=model.DescendantAdded:Connect(function(child) if  not ArmsVisual.Enabled then return;end task.delay(0.05,function() if  not ArmsVisual.Enabled then return;end ArmsVisual.LastUsedColor=nil;ArmsVisual.LastUsedTransparency=nil;ArmsVisual.LastUsedMaterial=nil;pcall(function() UpdateArmsVisual(currentSettings.Color,currentSettings.Transparency);end);end);end);ArmsVisual.ViewModelChildrenRemovedConnection=model.DescendantRemoving:Connect(function(child) if  not ArmsVisual.Enabled then return;end if (child:IsA("BasePart") or child:IsA("MeshPart") or child:IsA("Part") or child:IsA("UnionOperation")) then task.delay(0.1,function() if (ArmsVisual.Enabled and model.Parent) then ArmsVisual.LastUsedColor=nil;ArmsVisual.LastUsedTransparency=nil;ArmsVisual.LastUsedMaterial=nil;pcall(function() UpdateArmsVisual(currentSettings.Color,currentSettings.Transparency);end);end end);end end);task.delay(0.1,function() if ArmsVisual.Enabled then ArmsVisual.LastUsedColor=nil;ArmsVisual.LastUsedTransparency=nil;ArmsVisual.LastUsedMaterial=nil;pcall(function() UpdateArmsVisual(currentSettings.Color,currentSettings.Transparency);end);end end);end ArmsVisual.WeaponChangeConnection=camera.ChildAdded:Connect(function(child) if shouldProcess(child) then task.delay(0.05,function() updateViewModel(child);end);end end);ArmsVisual.WeaponRemoveConnection=camera.ChildRemoved:Connect(function(child) if (child==ArmsVisual.CachedViewModel) then ArmsVisual.CachedViewModel=nil;ArmsVisual.LastViewModelCheck=nil;if ArmsVisual.ViewModelChildrenConnection then ArmsVisual.ViewModelChildrenConnection:Disconnect();ArmsVisual.ViewModelChildrenConnection=nil;end if ArmsVisual.ViewModelChildrenRemovedConnection then ArmsVisual.ViewModelChildrenRemovedConnection:Disconnect();ArmsVisual.ViewModelChildrenRemovedConnection=nil;end task.delay(0.1,function() if  not ArmsVisual.Enabled then return;end for _,model in ipairs(camera:GetChildren()) do if (shouldProcess(model) and (model~=child)) then updateViewModel(model);break;end end end);end end);task.delay(0.05,function() for _,model in ipairs(camera:GetChildren()) do if shouldProcess(model) then updateViewModel(model);break;end end end);return true;end if ArmsVisual.ViewModelChildrenConnection then ArmsVisual.ViewModelChildrenConnection:Disconnect();ArmsVisual.ViewModelChildrenConnection=nil;end local originalToggleCallback=nil;if (PlayerHandSection and PlayerHandSection.Objects and PlayerHandSection.Objects['EnableHandSkin'] and PlayerHandSection.Objects['EnableHandSkin'].Callback) then originalToggleCallback=PlayerHandSection.Objects['EnableHandSkin'].Callback;PlayerHandSection.Objects['EnableHandSkin'].Callback=function(value) if originalToggleCallback then originalToggleCallback(value);end if value then if (type(SetupWeaponChangeListener)=="function") then SetupWeaponChangeListener();else warn("[ArmsVisual]  SetupWeaponChangeListener  ");end else if ArmsVisual.WeaponChangeConnection then ArmsVisual.WeaponChangeConnection:Disconnect();ArmsVisual.WeaponChangeConnection=nil;end if ArmsVisual.WeaponRemoveConnection then ArmsVisual.WeaponRemoveConnection:Disconnect();ArmsVisual.WeaponRemoveConnection=nil;end end end;else warn("[ArmsVisual]     EnableHandSkin   ");end if (ArmsVisual and ArmsVisual.Enabled) then if (type(SetupWeaponChangeListener)=="function") then SetupWeaponChangeListener();else warn("[ArmsVisual]  SetupWeaponChangeListener  ");end end local function CleanupArmsVisualConnections() if  not ArmsVisual then warn("[ArmsVisual]  ArmsVisual      ");return;end if ArmsVisual.Connection then ArmsVisual.Connection:Disconnect();ArmsVisual.Connection=nil;end if ArmsVisual.WeaponChangeConnection then ArmsVisual.WeaponChangeConnection:Disconnect();ArmsVisual.WeaponChangeConnection=nil;end if ArmsVisual.WeaponRemoveConnection then ArmsVisual.WeaponRemoveConnection:Disconnect();ArmsVisual.WeaponRemoveConnection=nil;end if ArmsVisual.ViewModelChangeConnection then ArmsVisual.ViewModelChangeConnection:Disconnect();ArmsVisual.ViewModelChangeConnection=nil;end ArmsVisual.CachedViewModel=nil;ArmsVisual.LastViewModelCheck=nil;ArmsVisual.LastUsedColor=nil;ArmsVisual.LastUsedTransparency=nil;ArmsVisual.LastUsedMaterial=nil;ArmsVisual.SavedAppearances={};end game:GetService("Players").PlayerRemoving:Connect(function(player) if (player==game:GetService("Players").LocalPlayer) then CleanupArmsVisualConnections();end end);if (Window and Window.unload) then local originalUnload=Window.unload;Window.unload=function(...) CleanupArmsVisualConnections();return originalUnload(...);end;end RunService.RenderStepped:Connect(function() if  not ESP.Enabled then return;end local drawingAvailable=pcall(function() local testDrawing=Drawing.new("Line");testDrawing:Remove();end);if ( not drawingAvailable and ESP.Drawing.Skeleton.Enabled) then ESP.Drawing.Skeleton.Enabled=false;sections.ESPMain:get_element("ESPSkeleton"):set_value(false);if  not ESP.DrawingUnavailableNotified then ESP.DrawingUnavailableNotified=true;Window:Notify({Title="",Description=" Drawing .  .",Lifetime=5});end return;end for _,player in pairs(Players:GetPlayers()) do if (player~=Players.LocalPlayer) then if (ESP.Drawing.Skeleton.Enabled and drawingAvailable and  not ESP.Skeletons[player]) then InitializePlayerSkeleton(player);end if (ESP.Drawing.Skeleton.Enabled and drawingAvailable and ESP.Skeletons[player]) then UpdatePlayerSkeleton(player,ESP.Skeletons[player]);end end end end);sections.WorldVisual:Header({Text="World Color Settings"});_G.WorldColorSettings={enabled=false,originalAmbient=nil,originalOutdoorAmbient=nil,customAmbient=Color3.fromRGB(72,69,157),customOutdoorAmbient=Color3.fromRGB(47,61,132),connection=nil};sections.WorldVisual:Toggle({Name="Custom World Color",Default=false,Callback=function(value) _G.WorldColorSettings.enabled=value;if value then if  not _G.WorldColorSettings.originalAmbient then _G.WorldColorSettings.originalAmbient=Lighting.Ambient;_G.WorldColorSettings.originalOutdoorAmbient=Lighting.OutdoorAmbient;end if  not _G.WorldColorSettings.connection then _G.WorldColorSettings.connection=RunService.Heartbeat:Connect(function() if _G.WorldColorSettings.enabled then Lighting.Ambient=_G.WorldColorSettings.customAmbient;Lighting.OutdoorAmbient=_G.WorldColorSettings.customOutdoorAmbient;end end);end else if _G.WorldColorSettings.connection then _G.WorldColorSettings.connection:Disconnect();_G.WorldColorSettings.connection=nil;end if _G.WorldColorSettings.originalAmbient then Lighting.Ambient=_G.WorldColorSettings.originalAmbient;Lighting.OutdoorAmbient=_G.WorldColorSettings.originalOutdoorAmbient;end end end},"CustomWorldColor");sections.WorldVisual:Colorpicker({Name="Indoor Ambient",Default=Color3.fromRGB(72,69,157),Alpha=0,Callback=function(color) _G.WorldColorSettings.customAmbient=color;if _G.WorldColorSettings.enabled then Lighting.Ambient=color;end end},"IndoorAmbientColor");sections.WorldVisual:Colorpicker({Name="Outdoor Ambient",Default=Color3.fromRGB(47,61,132),Alpha=0,Callback=function(color) _G.WorldColorSettings.customOutdoorAmbient=color;if _G.WorldColorSettings.enabled then Lighting.OutdoorAmbient=color;end end},"OutdoorAmbientColor");sections.WorldVisual:Button({Name="Reset World Color",Callback=function() if _G.WorldColorSettings.originalAmbient then _G.WorldColorSettings.customAmbient=_G.WorldColorSettings.originalAmbient;_G.WorldColorSettings.customOutdoorAmbient=_G.WorldColorSettings.originalOutdoorAmbient;if _G.WorldColorSettings.enabled then Lighting.Ambient=_G.WorldColorSettings.originalAmbient;Lighting.OutdoorAmbient=_G.WorldColorSettings.originalOutdoorAmbient;end sections.WorldVisual:get_element("IndoorAmbientColor"):set_value(_G.WorldColorSettings.originalAmbient);sections.WorldVisual:get_element("OutdoorAmbientColor"):set_value(_G.WorldColorSettings.originalOutdoorAmbient);end end});local function PreventCameraConflicts() if  not ArmsVisual then return;end local camProtectionConnection;camProtectionConnection=game:GetService("RunService").Heartbeat:Connect(function() if  not ArmsVisual.Enabled then camProtectionConnection:Disconnect();return;end pcall(function() for _,child in ipairs(workspace.Camera:GetChildren()) do if child.Name:lower():find("camera") then pcall(function() for _,subChild in ipairs(child:GetDescendants()) do if (subChild:IsA("BasePart") or subChild:IsA("MeshPart") or subChild:IsA("Part") or subChild:IsA("UnionOperation")) then pcall(function() subChild.Transparency=0;subChild.Material=Enum.Material.SmoothPlastic;subChild.Color=Color3.fromRGB(163,162,165);end);elseif (subChild:IsA("Decal") or subChild:IsA("Texture")) then pcall(function() subChild.Transparency=0;end);end end end);end end end);end);return camProtectionConnection;end local prevArmsVisualEnabled=false;game:GetService("RunService").Heartbeat:Connect(function() if (ArmsVisual and (ArmsVisual.Enabled~=prevArmsVisualEnabled)) then prevArmsVisualEnabled=ArmsVisual.Enabled;if ArmsVisual.Enabled then PreventCameraConflicts();end end end);local function ForceUpdateArmsVisual() if  not ArmsVisual then return;end ArmsVisual.LastUsedColor=nil;ArmsVisual.LastUsedTransparency=nil;ArmsVisual.LastUsedMaterial=nil;ArmsVisual.LastUpdateTime=nil;ArmsVisual.LastViewModelCheck=nil;ArmsVisual.CachedViewModel=nil;pcall(function() for _,child in ipairs(workspace.Camera:GetChildren()) do if (child:IsA("Model") and  not child.Name:lower():find("camera")) then ArmsVisual.CachedViewModel=child;break;end end end);task.delay(0.05,function() pcall(function() if ArmsVisual.Enabled then local safeColor=ArmsVisual.Color or Color3.fromRGB(0,255,255) ;local safeTransparency=ArmsVisual.Transparency or 0.5 ;UpdateArmsVisual(safeColor,safeTransparency);end end);end);if ArmsVisual.Enabled then pcall(SetupWeaponChangeListener);end end local cameraProtectionConnection=nil;local function PreventCameraConflicts() if cameraProtectionConnection then cameraProtectionConnection:Disconnect();cameraProtectionConnection=nil;end cameraProtectionConnection=game:GetService("RunService").Heartbeat:Connect(function() if  not ArmsVisual.Enabled then cameraProtectionConnection:Disconnect();cameraProtectionConnection=nil;return;end pcall(function() for _,child in ipairs(workspace.Camera:GetChildren()) do if child.Name:lower():find("camera") then for _,subChild in ipairs(child:GetDescendants()) do if (subChild:IsA("BasePart") or subChild:IsA("MeshPart") or subChild:IsA("Part") or subChild:IsA("UnionOperation")) then pcall(function() subChild.Transparency=0;subChild.Material=Enum.Material.SmoothPlastic;subChild.Color=Color3.fromRGB(163,162,165);end);elseif (subChild:IsA("Decal") or subChild:IsA("Texture")) then pcall(function() subChild.Transparency=0;end);end end end end end);end);return cameraProtectionConnection;end local prevArmsVisualEnabled=false;game:GetService("RunService").Heartbeat:Connect(function() if (ArmsVisual and (ArmsVisual.Enabled~=prevArmsVisualEnabled)) then prevArmsVisualEnabled=ArmsVisual.Enabled;if ArmsVisual.Enabled then PreventCameraConflicts();elseif cameraProtectionConnection then cameraProtectionConnection:Disconnect();cameraProtectionConnection=nil;end end end);localplayer.CharacterAdded:Connect(function(lchar) local maingui=localplayer.PlayerGui:WaitForChild("MainGui");if maingui then maingui.ChildAdded:Connect(function(Sound) if (Sound:IsA("Sound") and hitsoundbool) then if ((Sound.SoundId=="rbxassetid://4585351098") or (Sound.SoundId=="rbxassetid://4585382589")) then Sound.SoundId=hitsoundlib[hitsoundhead];elseif ((Sound.SoundId=="rbxassetid://4585382046") or (Sound.SoundId=="rbxassetid://4585364605")) then Sound.SoundId=hitsoundlib[hitsoundbody];end end end);end end);localplayer.PlayerGui.MainGui.ChildAdded:Connect(function(Sound) if (Sound:IsA("Sound") and hitsoundbool) then if ((Sound.SoundId=="rbxassetid://4585351098") or (Sound.SoundId=="rbxassetid://4585382589")) then Sound.SoundId=hitsoundlib[hitsoundhead];elseif ((Sound.SoundId=="rbxassetid://4585382046") or (Sound.SoundId=="rbxassetid://4585364605")) then Sound.SoundId=hitsoundlib[hitsoundbody];end end end);local fpsrequired=require(game.ReplicatedStorage.Modules.FPS);local a1table;localplayer.CharacterAdded:Connect(function() task.wait(1);for i,v in pairs(getgc(true)) do if ((type(v)=="table") and rawget(v,"humanoid") and rawget(v,"settings")) then a1table=v;break;end end end);runs.RenderStepped:Connect(function() pcall(function() if (aimfovcircle and aimfovcircle.Visible) then aimfovcircle.Position=Vector2.new(wcamera.ViewportSize.X/2 ,wcamera.ViewportSize.Y/2 );aimfovcircle.Radius=aimfov;end if (snaplinebool and (aimtarget~=nil) and (aimtargetpart~=nil)) then local screenpos=wcamera:WorldToViewportPoint(aimtargetpart.Position);aimsnapline.From=Vector2.new(wcamera.ViewportSize.X/2 ,wcamera.ViewportSize.Y/2 );aimsnapline.To=Vector2.new(screenpos.X,screenpos.Y);aimsnapline.Visible=true;else aimsnapline.Visible=false;end if (aimtarget~=nil) then local targetName=aimtarget.Name or "Unknown" ;aimtargetname.Text=targetName;aimtargetname.Position=Vector2.new(wcamera.ViewportSize.X/2 ,(wcamera.ViewportSize.Y/2) + aimfov + 20 );pcall(function() local gunname,gun,guninv=getcurrentgun(localplayer);if gun then local ammo=gun:FindFirstChild("LoadedAmmo",true);if ammo then local shots= #ammo:GetChildren();aimtargetshots.Text="Shots: "   .. shots ;aimtargetshots.Position=Vector2.new(wcamera.ViewportSize.X/2 ,(wcamera.ViewportSize.Y/2) + aimfov + 40 );end end end);else aimtargetname.Text="None";aimtargetshots.Text=" ";end end);end);runs.Heartbeat:Connect(function(delta) if ( not localplayer.Character or  not localplayer.Character:FindFirstChild("HumanoidRootPart") or  not localplayer.Character:FindFirstChild("Humanoid")) then return;end pcall(function() aimtarget=GetClosestPlayer();if (aimtarget and aimtarget.Character) then aimtargetpart=aimtarget.Character:FindFirstChild(aimpart);else aimtargetpart=nil;end end);if (aimtrigger and (aimtarget~=nil) and a1table and fpsrequired and fpsrequired.action) then pcall(function() fpsrequired.action(a1table,true);wait();fpsrequired.action(a1table,false);end);end if (aimselftrack and localplayer.Character and localplayer.Character:FindFirstChild("HumanoidRootPart")) then pcall(function() selftrack_update+=1 if (selftrack_update>=30) then selftrack_update=0;local ping=localplayer:GetNetworkPing() * 1000 ;local key=math.floor(ping/30 ) * 30 ;local added=false;for i,entry in ipairs(selftrack_data) do if (entry.ms==key) then entry.vpos=localplayer.Character.HumanoidRootPart.Position + Vector3.new(0,1.5,0) ;added=true;break;end end if  not added then table.insert(selftrack_data,{ms=key,vpos=localplayer.Character.HumanoidRootPart.Position + Vector3.new(0,1.5,0) });end if ( #selftrack_data>30) then table.remove(selftrack_data,1);end end end);end end);scriptloading=false;local function isvisible(char,object) if ( not localplayer.Character or  not localplayer.Character:FindFirstChild("HumanoidRootPart")) then return false;end if (aimvischeck==false) then return true;end local origin=localplayer.Character.HumanoidRootPart.Position + Vector3.new(0,1.3,0) ;if aimselftrack then local plrping=(localplayer:GetNetworkPing() * 1000) + 5 ;local key=math.floor(plrping/10 ) * 10 ;local onv;for _,entry in ipairs(selftrack_data) do if (entry.ms==key) then onv=entry;end end if (onv~=nil) then origin=onv.vpos;end end local pos=object.Position;local dir=pos-origin ;local dist=dir.Magnitude + 5 ;local penetrated=true;dir=dir.Unit;local params=RaycastParams.new();params.IgnoreWater=true;params.CollisionGroup="WeaponRay";params.FilterDescendantsInstances={localplayer.Character:GetChildren(),wcamera:GetChildren(),aimignoreparts};local ray=workspace:Raycast(origin,dir * dist ,params);if (ray and ray.Instance:IsDescendantOf(char)) then return true;elseif (ray and (ray.Instance.Name~="Terrain") and  not ray.Instance:GetAttribute("NoPen")) then local armorpen4=10;if globalammo then armorpen4=globalammo:GetAttribute("ArmorPen");end local FunctionLibraryExtension=require(game.ReplicatedStorage.Modules.FunctionLibraryExtension);local armorpen1,newpos2=FunctionLibraryExtension.Penetration(FunctionLibraryExtension,ray.Instance,ray.Position,dir,armorpen4);if ((armorpen1==nil) or (newpos2==nil)) then return false;end local neworigin=ray.Position + (dir * 0.01) ;local newray=workspace:Raycast(neworigin,dir * (dist-(neworigin-origin).Magnitude) ,params);if (newray and newray.Instance:IsDescendantOf(char)) then return true;end end return false;end local function isonscreen(object) local _,bool=wcamera:WorldToScreenPoint(object.Position);return bool;end local function getcurrentgun(plr) local char=plr.Character;if  not char then return nil,nil;end local invchar=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;if  not invchar then return nil,nil;end local gun=nil;local gunname=nil;local guninv=nil;for _,desc in ipairs(char:GetDescendants()) do if (desc:IsA("Model") and desc:FindFirstChild("ItemRoot") and desc:FindFirstChild("Attachments")) then gun=desc;gunname=desc.Name;guninv=invchar:FindFirstChild(gunname);end end return gunname,gun,guninv;end local function ForceESPRefresh() ESP.Initialized=false;pcall(function() local oldGui=CoreGui:FindFirstChild("ESPHolder");if oldGui then oldGui:Destroy();end end);for player,skeleton in pairs(ESP.Skeletons or {} ) do for name,element in pairs(skeleton) do if ((type(name)=="string") and (name~="lastPlayerPos") and (name~="lastUpdate") and (name~="lastFoV") and (name~="lastCamPos")) then pcall(function() if (element and (typeof(element)~="table") and (type(element)~="number") and (element.Visible~=nil)) then element.Visible=false;end end);end end end if ESP.GazeLines then for _,line in pairs(ESP.GazeLines) do line.Visible=false;end end end local lastAutoRefreshTime=tick();RunService.Heartbeat:Connect(function() if  not ESP.Enabled then return;end local currentTime=tick();if ((currentTime-lastAutoRefreshTime)>60) then lastAutoRefreshTime=currentTime;ForceESPRefresh();end end);ESP.Performance={SkeletonUpdateInterval=0.1,GazeLineUpdateInterval=0.03,LastSkeletonUpdate=tick(),LastGazeLineUpdate=tick()};sections.GunMod:Header({Text="Gun Mod Settings"});sections.GunMod:Toggle({Name="Rapid Fire",Default=false,Callback=function(value) if value then local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);sett.FireRate=0.001;end end else local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);sett.FireRate=v.ItemProperties.Tool:GetAttribute("FireRate");end end end end},"RapidFire");sections.GunMod:Toggle({Name="Custom Rapid Fire",Default=false,Callback=function(value) allvars.customRapidFireEnabled=value;if value then local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);sett.FireRate=0.005;end end else local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);sett.FireRate=v.ItemProperties.Tool:GetAttribute("FireRate");end end end end},"CustomRapidFire");sections.GunMod:Slider({Name="Custom Rapid Fire Delay",Default=0.005,Minimum=0.001,Maximum=0.1,Precision=3,Callback=function(value) if allvars.customRapidFireEnabled then local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);sett.FireRate=value;end end end end});sections.GunMod:Toggle({Name="Unlock Firemodes",Default=false,Callback=function(value) if value then local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);sett.FireModes={"Auto","Semi"};end end if (localplayer.Character and localplayer.Character:FindFirstChild("WeaponModel")) then local a1=require(game.ReplicatedStorage.Modules.FPS).getController();require(game.ReplicatedStorage.Modules.FPS).equip(a1,a1.weapon,nil);end else local inv=game.ReplicatedStorage.Players:FindFirstChild(game.Players.LocalPlayer.Name).Inventory;for i,v in ipairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);if v.ItemProperties.Tool:GetAttribute("FireModes") then local firemodes=v.ItemProperties.Tool:GetAttribute("FireModes"):split(",");sett.FireModes=firemodes;end end end if (localplayer.Character and localplayer.Character:FindFirstChild("WeaponModel")) then local a1=require(game.ReplicatedStorage.Modules.FPS).getController();require(game.ReplicatedStorage.Modules.FPS).equip(a1,a1.weapon,nil);end end end},"UnlockFiremodes");local instrelOGfunc=require(game.ReplicatedStorage.Modules.FPS).reload;local instrelMODfunc=function(a1,a2) local function aaa(a1) local v27_2_=a1.weapon;local v27_1_=v27_2_.Attachments;local v27_3_="Magazine";v27_1_=v27_1_:FindFirstChild(v27_3_);if v27_1_ then local v27_4_=a1.weapon;v27_3_=v27_4_.Attachments;v27_2_=v27_3_.Magazine;v27_2_=v27_2_:GetChildren();v27_1_=v27_2_[ -1];if v27_1_ then v27_2_=v27_1_.ItemProperties;v27_4_="LoadedAmmo";v27_2_=v27_2_:GetAttribute(v27_4_);a1.Bullets=v27_2_;v27_2_={};a1.BulletsList=v27_2_;v27_3_=v27_1_.ItemProperties;v27_2_=v27_3_.LoadedAmmo;v27_3_=v27_2_:GetChildren();local v27_6_=1;v27_4_= #v27_3_;local v27_5_=1;for v27_6_=v27_6_,v27_4_,v27_5_ do local v27_7_=a1.BulletsList;local v27_10_=v27_3_[v27_6_];local v27_9_=v27_10_.Name;local v27_8_=tonumber;v27_8_=v27_8_(v27_9_);v27_9_={};v27_10_=v27_3_[v27_6_];local v27_12_="AmmoType";v27_10_=v27_10_:GetAttribute(v27_12_);v27_9_.AmmoType=v27_10_;v27_10_=v27_3_[v27_6_];v27_12_="Amount";v27_10_=v27_10_:GetAttribute(v27_12_);v27_9_.Amount=v27_10_;v27_7_[v27_8_]=v27_9_;end end v27_2_=0;a1.movementModifier=v27_2_;v27_2_=a1.weapon;if v27_2_ then v27_2_=a1.movementModifier;local v27_6_=a1.weapon;local v27_5_=v27_6_.ItemProperties;v27_4_=v27_5_.Tool;v27_6_="MovementModifer";v27_4_=v27_4_:GetAttribute(v27_6_);v27_3_=v27_4_ or 0 ;v27_2_+=v27_3_ a1.movementModifier=v27_2_;v27_2_=a1.weapon;v27_4_="Attachments";v27_2_=v27_2_:FindFirstChild(v27_4_);if v27_2_ then v27_3_=a1.weapon;v27_2_=v27_3_.Attachments;v27_2_=v27_2_:GetChildren();v27_5_=1;v27_3_= #v27_2_;v27_4_=1;for v27_5_=v27_5_,v27_3_,v27_4_ do v27_6_=v27_2_[v27_5_];local v27_8_="StringValue";v27_6_=v27_6_:FindFirstChildOfClass(v27_8_);if v27_6_ then local v27_7_=v27_6_.ItemProperties;local v27_9_="Attachment";v27_7_=v27_7_:FindFirstChild(v27_9_);if v27_7_ then v27_7_=a1.movementModifier;local v27_10_=v27_6_.ItemProperties;v27_9_=v27_10_.Attachment;local v27_11_="MovementModifer";v27_9_=v27_9_:GetAttribute(v27_11_);v27_8_=v27_9_ or 0 ;v27_7_+=v27_8_ a1.movementModifier=v27_7_;end end end end return;end end v27_2_=a1.weapon;v27_1_=v27_2_.ItemProperties;v27_3_="LoadedAmmo";v27_1_=v27_1_:GetAttribute(v27_3_);a1.Bullets=v27_1_;v27_1_={};a1.BulletsList=v27_1_;v27_3_=a1.weapon;v27_2_=v27_3_.ItemProperties;v27_1_=v27_2_.LoadedAmmo;v27_2_=v27_1_:GetChildren();local v27_5_=1;v27_3_= #v27_2_;local v27_4_=1;for v27_5_=v27_5_,v27_3_,v27_4_ do local v27_6_=a1.BulletsList;local v27_9_=v27_2_[v27_5_];local v27_8_=v27_9_.Name;local v27_7_=tonumber;v27_7_=v27_7_(v27_8_);v27_8_={};v27_9_=v27_2_[v27_5_];local v27_11_="AmmoType";v27_9_=v27_9_:GetAttribute(v27_11_);v27_8_.AmmoType=v27_9_;v27_9_=v27_2_[v27_5_];v27_11_="Amount";v27_9_=v27_9_:GetAttribute(v27_11_);v27_8_.Amount=v27_9_;v27_6_[v27_7_]=v27_8_;end end local v103_2_=a1.viewModel;if v103_2_ then local v103_3_=a1.viewModel;v103_2_=v103_3_.Item;local v103_4_="AmmoTypes";v103_2_=v103_2_:FindFirstChild(v103_4_);if v103_2_ then local v103_5_=a1.weapon;v103_4_=v103_5_.ItemProperties;v103_3_=v103_4_.AmmoType;v103_2_=v103_3_.Value;v103_5_=a1.viewModel;v103_4_=v103_5_.Item;v103_3_=v103_4_.AmmoTypes;v103_3_=v103_3_:GetChildren();local v103_6_=1;v103_4_= #v103_3_;v103_5_=1;for v103_6_=v103_6_,v103_4_,v103_5_ do local v103_7_=v103_3_[v103_6_];local v103_8_=1;v103_7_.Transparency=v103_8_;end v103_6_=a1.viewModel;v103_5_=v103_6_.Item;v103_4_=v103_5_.AmmoTypes;v103_6_=v103_2_;v103_4_=v103_4_:FindFirstChild(v103_6_);v103_5_=0;v103_4_.Transparency=v103_5_;v103_5_=a1.viewModel;v103_4_=v103_5_.Item;v103_6_="AmmoTypes2";v103_4_=v103_4_:FindFirstChild(v103_6_);if v103_4_ then v103_6_=a1.viewModel;v103_5_=v103_6_.Item;v103_4_=v103_5_.AmmoTypes2;v103_4_=v103_4_:GetChildren();local v103_7_=1;v103_5_= #v103_4_;v103_6_=1;for v103_7_=v103_7_,v103_5_,v103_6_ do local v103_8_=v103_4_[v103_7_];local v103_9_=1;v103_8_.Transparency=v103_9_;end v103_7_=a1.viewModel;v103_6_=v103_7_.Item;v103_5_=v103_6_.AmmoTypes2;v103_7_=v103_2_;v103_5_=v103_5_:FindFirstChild(v103_7_);v103_6_=0;v103_5_.Transparency=v103_6_;end end end v103_2_=a1.reloading;if (v103_2_==false) then v103_2_=a1.cancellingReload;if (v103_2_==false) then v103_2_=a1.MaxAmmo;v103_3_=0;if (v103_3_<v103_2_) then v103_3_=true;local v103_6_=1;local v103_7_=a1.CancelTables;v103_4_= #v103_7_;local v103_5_=1;for v103_6_=v103_6_,v103_4_,v103_5_ do local v103_9_=a1.CancelTables;local v103_8_=v103_9_[v103_6_];v103_7_=v103_8_.Visible;if (v103_7_==true) then v103_3_=false;else end end v103_2_=v103_3_;if v103_2_ then v103_3_=a1.clientAnimationTracks;v103_2_=v103_3_.Inspect;if v103_2_ then v103_3_=a1.clientAnimationTracks;v103_2_=v103_3_.Inspect;v103_2_:Stop();v103_3_=a1.serverAnimationTracks;v103_2_=v103_3_.Inspect;v103_2_:Stop();v103_4_=a1.WeldedTool;v103_3_=v103_4_.ItemRoot;v103_2_=v103_3_.Sounds.Inspect;v103_2_:Stop();end v103_3_=a1.settings;v103_2_=v103_3_.AimWhileActing;if  not v103_2_ then v103_2_=a1.isAiming;if v103_2_ then v103_4_=false;a1:aim(v103_4_);end end if (a1.reloadType=="loadByHand") then local count=a1.Bullets;local maxcount=a1.MaxAmmo;for i=count,maxcount do game.ReplicatedStorage.Remotes.Reload:InvokeServer(nil,0.001,nil);end aaa(a1);else game.ReplicatedStorage.Remotes.Reload:InvokeServer(nil,0.001,nil);require(game.ReplicatedStorage.Modules.FPS).equip(a1,a1.weapon,nil);aaa(a1);end end end end end end;workspace.Camera.ChildAdded:Connect(function(ch) if (allvars and allvars.instaequip and ch:IsA("Model")) then task.wait(0.015);for i,v in pairs(ch.Humanoid.Animator:GetPlayingAnimationTracks()) do if (v.Animation.Name=="Equip") then v.TimePosition=v.Length-0.01 ;end end end end);runs.Heartbeat:Connect(function(delta) local inv=game.ReplicatedStorage.Players:FindFirstChild(localplayer.Name);if inv then inv=inv.Inventory;if inv then for _,v in pairs(inv:GetChildren()) do if v:FindFirstChild("SettingsModule") then local sett=require(v.SettingsModule);if (allvars and allvars.noswaybool) then sett.swayModifier=0;sett.aimSwayModifier=0;sett.breathSwayModifier=0;end end end end end end);sections.GunMod:Toggle({Name="Instant Reload",Default=false,Callback=function(value) if value then require(game.ReplicatedStorage.Modules.FPS).reload=instrelMODfunc;else require(game.ReplicatedStorage.Modules.FPS).reload=instrelOGfunc;end end},"InstantReload");sections.GunMod:Toggle({Name="Instant Equip",Default=false,Callback=function(value) if allvars then allvars.instaequip=value;end end},"InstantEquip");sections.GunMod:Toggle({Name="No Sway",Default=false,Callback=function(value) if allvars then allvars.noswaybool=value;end end},"NoSway");sections.GunMod:Slider({Name="Multitaps",Default=1,Minimum=1,Maximum=5,Precision=0,Callback=function(value) if allvars then allvars.multitaps=value;end end},"Multitaps"); end
